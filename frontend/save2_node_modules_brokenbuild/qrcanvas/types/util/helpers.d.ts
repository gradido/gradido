import { QRCanvasLayerValue, QRCanvasDrawTextOptions } from '../types';
declare const helpers: {
    createCanvas: typeof createCanvas;
    isCanvas: typeof isCanvas;
    isDrawable: typeof isDrawable;
    getCanvas: typeof getCanvas;
    updateCanvas: typeof updateCanvas;
    drawCanvas: typeof drawCanvas;
    drawText: typeof drawText;
};
export default helpers;
declare function createCanvas(width: number, height: number): HTMLCanvasElement;
declare function isCanvas(el: QRCanvasLayerValue): boolean;
declare function isDrawable(el: QRCanvasLayerValue): boolean;
/**
 * @desc Create a new canvas.
 * @param {Int} width Width of the canvas.
 * @param {Int} height Height of the canvas.
 * @return {Canvas}
 */
declare function getCanvas(width: number, height?: number): HTMLCanvasElement;
declare function updateCanvas(canvas: HTMLCanvasElement, width: number, height?: number): HTMLCanvasElement;
interface DrawCanvasOptions {
    cellSize?: number;
    context?: any;
    clear?: boolean;
}
/**
 * @desc Draw to the canvas with given image or colors.
 * @param {Canvas} canvas The canvas to initialize.
 * @param {Image | String | Array} data
 * @param {Object} options
 *    cellSize: {Int}
 *    clear: {Boolean}
 */
declare function drawCanvas(canvas: HTMLCanvasElement, data: QRCanvasLayerValue, options?: DrawCanvasOptions): HTMLCanvasElement;
declare function drawText(text: string, options?: QRCanvasDrawTextOptions): HTMLCanvasElement;
