"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.MockLink = void 0;
var core_1 = require("@apollo/client/core");
var graphql_1 = require("graphql");
var utilities_1 = require("@apollo/client/utilities");
var mockSubscription_1 = require("./mockSubscription");
var MockLink = (function (_super) {
    __extends(MockLink, _super);
    function MockLink() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.requestHandlers = {};
        _this.request = function (operation) {
            var key = requestToKey(operation.query);
            var handler = _this.requestHandlers[key];
            if (!handler) {
                throw new Error("Request handler not defined for query: ".concat((0, graphql_1.print)(operation.query)));
            }
            return new core_1.Observable(function (observer) {
                var result = undefined;
                try {
                    result = handler(operation.variables);
                }
                catch (error) {
                    var message = error instanceof Error ? error.message : error;
                    throw new Error("Unexpected error whilst calling request handler: ".concat(message));
                }
                if (isPromise(result)) {
                    result
                        .then(function (result) {
                        observer.next(result);
                        observer.complete();
                    })
                        .catch(function (error) {
                        observer.error(error);
                    });
                }
                else if (isSubscription(result)) {
                    result.subscribe(observer);
                }
                else {
                    throw new Error("Request handler must return a promise or subscription. Received '".concat(typeof result, "'."));
                }
                return function () { };
            });
        };
        return _this;
    }
    MockLink.prototype.setRequestHandler = function (requestQuery, handler) {
        var queryWithoutClientDirectives = (0, utilities_1.removeClientSetsFromDocument)(requestQuery);
        if (queryWithoutClientDirectives === null) {
            console.warn('Warning: mock-apollo-client - The query is entirely client side (using @client directives) so the request handler will not be registered.');
            return;
        }
        var key = requestToKey(queryWithoutClientDirectives);
        if (this.requestHandlers[key]) {
            throw new Error("Request handler already defined for query: ".concat((0, graphql_1.print)(requestQuery)));
        }
        this.requestHandlers[key] = handler;
    };
    return MockLink;
}(core_1.ApolloLink));
exports.MockLink = MockLink;
var normalise = function (requestQuery) {
    var stripped = (0, utilities_1.removeConnectionDirectiveFromDocument)(requestQuery);
    stripped = stripped !== null
        ? stripTypenames(stripped)
        : null;
    return stripped === null
        ? requestQuery
        : stripped;
};
var stripTypenames = function (document) {
    return (0, graphql_1.visit)(document, {
        Field: {
            enter: function (node) { return node.name.value === '__typename'
                ? null
                : undefined; },
        },
    });
};
var requestToKey = function (query) {
    var normalised = normalise(query);
    var queryString = query && (0, graphql_1.print)(normalised);
    var requestKey = { query: queryString };
    return JSON.stringify(requestKey);
};
var isPromise = function (maybePromise) {
    return maybePromise && typeof maybePromise.then === 'function';
};
var isSubscription = function (maybeSubscription) {
    return maybeSubscription && maybeSubscription instanceof mockSubscription_1.MockSubscription;
};
