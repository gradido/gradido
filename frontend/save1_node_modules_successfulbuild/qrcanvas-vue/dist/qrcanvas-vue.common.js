/*! qrcanvas-vue v2.1.1 | ISC License */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Vue = require('vue');
var qrcanvas = require('qrcanvas');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e["default"] : e; }

var Vue__default = /*#__PURE__*/_interopDefaultLegacy(Vue);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var _excluded = ["options"];
var QRCanvas = Vue__default.extend({
  props: {
    options: Object
  },
  render: function render(h) {
    var _this$$props = this.$props;
        _this$$props.options;
        var rest = _objectWithoutPropertiesLoose(_this$$props, _excluded);

    return h('canvas', rest);
  },
  methods: {
    update: function update(options) {
      // Render only if mounted, skip SSR.
      if (!this.mounted) return;
      this.$emit('beforeUpdate', this.$el);
      qrcanvas.qrcanvas(_extends({}, options, {
        canvas: this.$el
      }));
      this.$emit('updated', this.$el);
    }
  },
  watch: {
    options: 'update',
    width: 'update',
    height: 'update'
  },
  mounted: function mounted() {
    this.mounted = true;
    this.update(this.options);
  }
});

exports.QRCanvas = QRCanvas;
