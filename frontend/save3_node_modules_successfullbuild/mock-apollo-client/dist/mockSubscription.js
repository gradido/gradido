"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMockSubscription = exports.MockSubscription = void 0;
var MockSubscription = (function () {
    function MockSubscription(options) {
        var _a;
        this.loggingDisabled = (_a = options === null || options === void 0 ? void 0 : options.disableLogging) !== null && _a !== void 0 ? _a : false;
    }
    MockSubscription.prototype.subscribe = function (observer) {
        if (this.observer && !this.loggingDisabled) {
            console.warn('Warning: mock-apollo-client - Mock subscription was already being used for a previous query. ' +
                'Subsequent calls to next/error/complete will only affect subscriptions to the new query.');
        }
        this.observer = observer;
    };
    Object.defineProperty(MockSubscription.prototype, "closed", {
        get: function () {
            var _a, _b;
            return (_b = (_a = this.observer) === null || _a === void 0 ? void 0 : _a.closed) !== null && _b !== void 0 ? _b : true;
        },
        enumerable: false,
        configurable: true
    });
    MockSubscription.prototype.next = function (value) {
        var _a;
        this.verifyState();
        (_a = this.observer) === null || _a === void 0 ? void 0 : _a.next(value);
    };
    MockSubscription.prototype.error = function (errorValue) {
        var _a;
        this.verifyState();
        (_a = this.observer) === null || _a === void 0 ? void 0 : _a.error(errorValue);
    };
    MockSubscription.prototype.complete = function () {
        var _a;
        this.verifyState();
        (_a = this.observer) === null || _a === void 0 ? void 0 : _a.complete();
    };
    MockSubscription.prototype.verifyState = function () {
        if (this.loggingDisabled) {
            return;
        }
        if (!this.observer) {
            console.warn('Warning: mock-apollo-client - Mock subscription has no observer, this will have no effect');
        }
        else if (this.closed) {
            console.warn('Warning: mock-apollo-client - Mock subscription is closed, this will have no effect');
        }
    };
    return MockSubscription;
}());
exports.MockSubscription = MockSubscription;
var createMockSubscription = function (options) {
    return new MockSubscription(options);
};
exports.createMockSubscription = createMockSubscription;
