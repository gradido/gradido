name: gradido publish CI

on:
  push:
    branches:
      - master

jobs:
  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION FRONTEND ######################################
  ##############################################################################
  build_production_frontend:
    name: Docker Build Production - Frontend
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # FRONTEND ###############################################################
      ##########################################################################
      - name: Frontend | Build `production` image
        run: |
          docker build --target production -t "gradido/frontend:latest" -t "gradido/frontend:production" -t "gradido/frontend:${VERSION}" -t "gradido/frontend:${BUILD_VERSION}" frontend/
          docker save "gradido/frontend" > /tmp/frontend.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-frontend-production
          path: /tmp/frontend.tar

  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION BACKEND #######################################
  ##############################################################################
  build_production_backend:
    name: Docker Build Production - Backend
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # BACKEND ################################################################
      ##########################################################################
      - name: Backend | Build `production` image
        run: |
          docker build -f ./backend/Dockerfile --target production -t "gradido/backend:latest" -t "gradido/backend:production" -t "gradido/backend:${VERSION}" -t "gradido/backend:${BUILD_VERSION}" .
          docker save "gradido/backend" > /tmp/backend.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-backend-production
          path: /tmp/backend.tar

  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION DATABASE UP ###################################
  ##############################################################################
  build_production_database_up:
    name: Docker Build Production - Database up
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
      ##########################################################################
      # DATABASE UP ############################################################
      ##########################################################################
      - name: Database | Build `production_up` image
        run: |
          docker build --target production_up -t "gradido/database:production_up" database/
          docker save "gradido/database:production_up" > /tmp/database_up.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-database-production_up
          path: /tmp/database_up.tar

  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION LOGIN SERVER ##################################
  ##############################################################################
  build_production_login_server:
    name: Docker Build Production - Login Server
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # LOGIN SERVER ###########################################################
      ##########################################################################
      - name: Login Server | Build `production` image
        run: |
          docker build -t "gradido/login_server:latest" -t "gradido/login_server:production" -t "gradido/login_server:${VERSION}" -t "gradido/login_server:${BUILD_VERSION}" login_server/
          docker save "gradido/login_server" > /tmp/login_server.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-login-server-production
          path: /tmp/login_server.tar

  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION COMMUNITY SERVER ##############################
  ##############################################################################
  build_production_community_server:
    name: Docker Build Production - Community Server
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # COMMUNITY SERVER #######################################################
      ##########################################################################
      - name: Community Server | Build `production` image
        run: |
          docker build -t "gradido/community_server:latest" -t "gradido/community_server:production" -t "gradido/community_server:${VERSION}" -t "gradido/community_server:${BUILD_VERSION}" -f ./community_server/Dockerfile ./
          docker save "gradido/community_server" > /tmp/community_server.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-community-server-production
          path: /tmp/community_server.tar

  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION MARIADB #######################################
  ##############################################################################
  build_production_mariadb:
    name: Docker Build Production - MariaDB
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # MARIADB ################################################################
      ##########################################################################
      - name: MariaDB | Build `production` image
        run: |
          docker build -t "gradido/mariadb:latest" -t "gradido/mariadb:production" -t "gradido/mariadb:${VERSION}" -t "gradido/mariadb:${BUILD_VERSION}" -f ./mariadb/Dockerfile ./
          docker save "gradido/mariadb" > /tmp/mariadb.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-mariadb-production
          path: /tmp/mariadb.tar

  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION NGINX #########################################
  ##############################################################################
  build_production_nginx:
    name: Docker Build Production - Nginx
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # NGINX ##################################################################
      ##########################################################################
      - name: Nginx | Build `production` image
        run: |
          docker build -t "gradido/nginx:latest" -t "gradido/nginx:production" -t "gradido/nginx:${VERSION}" -t "gradido/nginx:${BUILD_VERSION}" -f ./nginx/Dockerfile ./
          docker save "gradido/nginx" > /tmp/nginx.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: docker-nginx-production
          path: /tmp/nginx.tar

  ##############################################################################
  # JOB: UPLOAD TO DOCKERHUB ###################################################
  ##############################################################################
  upload_to_dockerhub:
    name: Upload to Dockerhub
    runs-on: ubuntu-latest
    needs: [build_production_frontend, build_production_backend, build_production_database_up, build_production_login_server, build_production_community_server, build_production_mariadb, build_production_nginx]
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
      ##########################################################################
      # DOWNLOAD DOCKER IMAGES #################################################
      ##########################################################################
      - name: Download Docker Image (Frontend)
        uses: actions/download-artifact@v2
        with:
          name: docker-frontend-production
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/frontend.tar
      - name: Download Docker Image (Backend)
        uses: actions/download-artifact@v2
        with:
          name: docker-backend-production
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/backend.tar
      - name: Download Docker Image (Database)
        uses: actions/download-artifact@v2
        with:
          name: docker-database-production_up
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/database_up.tar
      - name: Download Docker Image (Login Server)
        uses: actions/download-artifact@v2
        with:
          name: docker-login-server-production
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/login_server.tar
      - name: Download Docker Image (Community Server)
        uses: actions/download-artifact@v2
        with:
          name: docker-community-server-production
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/community_server.tar
      - name: Download Docker Image (MariaDB)
        uses: actions/download-artifact@v2
        with:
          name: docker-mariadb-production
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/mariadb.tar
      - name: Download Docker Image (Nginx)
        uses: actions/download-artifact@v2
        with:
          name: docker-nginx-production
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/nginx.tar
      ##########################################################################
      # Upload #################################################################
      ##########################################################################
      - name: login to dockerhub
        run: echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
      - name: Push frontend
        run: docker push --all-tags gradido/frontend
      - name: Push backend
        run: docker push --all-tags gradido/backend
      - name: Push database
        run: docker push --all-tags gradido/database
      - name: Push login_server
        run: docker push --all-tags gradido/login_server
      - name: Push community_server
        run: docker push --all-tags gradido/community_server
      - name: Push MariaDB
        run: docker push --all-tags gradido/mariadb
      - name: Push Nginx
        run: docker push --all-tags gradido/nginx

  # JOB: GITHUB TAG LATEST VERSION #############################################
  ##############################################################################
  ##############################################################################
  github_tag:
    name: Tag latest version on Github
    runs-on: ubuntu-latest
    needs: [upload_to_dockerhub]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch full History for changelog
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # Push version tag to GitHub #############################################
      ##########################################################################
      # TODO: this will error on duplicate
      #- name: package-version-to-git-tag
      #  uses: pkgdeps/git-tag-action@v2
      #  with:
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #    github_repo: ${{ github.repository }}
      #    version: ${{ env.VERSION }}
      #    git_commit_sha: ${{ github.sha }}
      #    git_tag_prefix: "v"
      ##########################################################################
      # Push build tag to GitHub ###############################################
      ##########################################################################
      - name: package-version-to-git-tag + build number
        uses: pkgdeps/git-tag-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          version: ${{ env.BUILD_VERSION }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "b"
      ##########################################################################
      # Push release tag to GitHub #############################################
      ##########################################################################
      - name: yarn install
        run: yarn install
      - name: generate changelog
        run: yarn auto-changelog --latest-version ${{ env.VERSION }} --unreleased-only
      - name: package-version-to-git-release
        continue-on-error: true # Will fail if tag exists
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          body_path: ./CHANGELOG.md
          draft: false
          prerelease: false