name: gradido publish CI

on:
  push:
    branches:
      - master

jobs:
  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION FRONTEND ######################################
  ##############################################################################
  build_production_frontend:
    if: startsWith(github.event.head_commit.message, 'chore(release):')
    name: Docker Build Production - Frontend
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v4
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # FRONTEND ###############################################################
      ##########################################################################
      - name: Frontend | Build `production` image
        run: |
          docker build -f ./frontend/Dockerfile --target production -t "gradido/frontend:latest" -t "gradido/frontend:production" -t "gradido/frontend:${VERSION}" -t "gradido/frontend:${BUILD_VERSION}" .
          docker save "gradido/frontend" > /tmp/frontend.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-frontend-production
          path: /tmp/frontend.tar

  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION ADMIN #########################################
  ##############################################################################
  build_production_admin:
    if: startsWith(github.event.head_commit.message, 'chore(release):')
    name: Docker Build Production - Admin
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v4
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # ADMIN ##################################################################
      ##########################################################################
      - name: Admin | Build `production` image
        run: |
          docker build -f ./admin/Dockerfile --target production -t "gradido/admin:latest" -t "gradido/admin:production" -t "gradido/admin:${VERSION}" -t "gradido/admin:${BUILD_VERSION}" .
          docker save "gradido/admin" > /tmp/admin.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-admin-production
          path: /tmp/admin.tar

  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION BACKEND #######################################
  ##############################################################################
  build_production_backend:
    if: startsWith(github.event.head_commit.message, 'chore(release):')
    name: Docker Build Production - Backend
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v4
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # BACKEND ################################################################
      ##########################################################################
      - name: Backend | Build `production` image
        run: |
          docker build -f ./backend/Dockerfile --target production -t "gradido/backend:latest" -t "gradido/backend:production" -t "gradido/backend:${VERSION}" -t "gradido/backend:${BUILD_VERSION}" .
          docker save "gradido/backend" > /tmp/backend.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-backend-production
          path: /tmp/backend.tar

  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION DHT-NODE ######################################
  ##############################################################################
  build_production_dht-node:
    if: startsWith(github.event.head_commit.message, 'chore(release):')
    name: Docker Build Production - DHT-Node
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v4
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # DHT-NODE ################################################################
      ##########################################################################
      - name: DHT-Node | Build `production` image
        run: |
          docker build -f ./dht-node/Dockerfile --target production -t "gradido/dht-node:latest" -t "gradido/dht-node:production" -t "gradido/dht-node:${VERSION}" -t "gradido/dht-node:${BUILD_VERSION}" .
          docker save "gradido/dht-node" > /tmp/dht-node.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-dht-node-production
          path: /tmp/dht-node.tar

  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION FEDERATION ######################################
  ##############################################################################
  build_production_federation:
    if: startsWith(github.event.head_commit.message, 'chore(release):')
    name: Docker Build Production - Federation
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v4
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # FEDERATION ##############################################################
      ##########################################################################
      - name: Federation | Build `production` image
        run: |
          docker build -f ./federation/Dockerfile --target production -t "gradido/federation:latest" -t "gradido/federation:production" -t "gradido/federation:${VERSION}" -t "gradido/federation:${BUILD_VERSION}" .
          docker save "gradido/federation" > /tmp/federation.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-federation-production
          path: /tmp/federation.tar

  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION DATABASE UP ###################################
  ##############################################################################
  build_production_database_up:
    if: startsWith(github.event.head_commit.message, 'chore(release):')
    name: Docker Build Production - Database up
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v4
      ##########################################################################
      # DATABASE UP ############################################################
      ##########################################################################
      - name: Database | Build `up` image
        run: |
          docker build -f ./database/Dockerfile --target up -t "gradido/database:up" .
          docker save "gradido/database:up" > /tmp/database_up.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-database-up
          path: /tmp/database_up.tar

  ##############################################################################
  # JOB: DOCKER BUILD PRODUCTION NGINX #########################################
  ##############################################################################
  build_production_nginx:
    if: startsWith(github.event.head_commit.message, 'chore(release):')
    name: Docker Build Production - Nginx
    runs-on: ubuntu-latest
    #needs: [nothing]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v4
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # NGINX ##################################################################
      ##########################################################################
      - name: Nginx | Build `production` image
        run: |
          docker build -t "gradido/nginx:latest" -t "gradido/nginx:production" -t "gradido/nginx:${VERSION}" -t "gradido/nginx:${BUILD_VERSION}" nginx/
          docker save "gradido/nginx" > /tmp/nginx.tar
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-nginx-production
          path: /tmp/nginx.tar

  ##############################################################################
  # JOB: UPLOAD TO DOCKERHUB ###################################################
  ##############################################################################
  upload_to_dockerhub:
    if: startsWith(github.event.head_commit.message, 'chore(release):')
    name: Upload to Dockerhub
    runs-on: ubuntu-latest
    needs: [build_production_frontend, build_production_backend, build_production_database_up, build_production_nginx]
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v4
      ##########################################################################
      # DOWNLOAD DOCKER IMAGES #################################################
      ##########################################################################
      - name: Download Docker Image (Frontend)
        uses: actions/download-artifact@v4
        with:
          name: docker-frontend-production
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/frontend.tar
      - name: Download Docker Image (Admin)
        uses: actions/download-artifact@v4
        with:
          name: docker-admin-production
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/admin.tar
      - name: Download Docker Image (Backend)
        uses: actions/download-artifact@v4
        with:
          name: docker-backend-production
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/backend.tar
      - name: Download Docker Image (DHT-Node)
        uses: actions/download-artifact@v4
        with:
          name: docker-dht-node-production
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/dht-node.tar
      - name: Download Docker Image (Federation)
        uses: actions/download-artifact@v4
        with:
          name: docker-federation-production
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/federation.tar
      - name: Download Docker Image (Database)
        uses: actions/download-artifact@v4
        with:
          name: docker-database-up
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/database_up.tar
      - name: Download Docker Image (Nginx)
        uses: actions/download-artifact@v4
        with:
          name: docker-nginx-production
          path: /tmp
      - name: Load Docker Image
        run: docker load < /tmp/nginx.tar
      ##########################################################################
      # Upload #################################################################
      ##########################################################################
      - name: login to dockerhub
        run: echo "${DOCKERHUB_TOKEN}" | docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
      - name: Push frontend
        run: docker push --all-tags gradido/frontend
      - name: Push admin
        run: docker push --all-tags gradido/admin
      - name: Push backend
        run: docker push --all-tags gradido/backend
      - name: Push dht-node
        run: docker push --all-tags gradido/dht-node
      - name: Push federation
        run: docker push --all-tags gradido/federation
      - name: Push database
        run: docker push --all-tags gradido/database
      - name: Push Nginx
        run: docker push --all-tags gradido/nginx

  # JOB: GITHUB TAG LATEST VERSION #############################################
  ##############################################################################
  ##############################################################################
  github_tag:
    if: startsWith(github.event.head_commit.message, 'chore(release):')
    name: Tag latest version on Github
    runs-on: ubuntu-latest
    needs: [upload_to_dockerhub]
    steps:
      ##########################################################################
      # CHECKOUT CODE ##########################################################
      ##########################################################################
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full History for changelog
      ##########################################################################
      # SET ENVS ###############################################################
      ##########################################################################
      - name: ENV - VERSION
        run: echo "VERSION=$(node -p -e "require('./package.json').version")" >> $GITHUB_ENV
      - name: ENV - BUILD_DATE
        run: echo "BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_ENV
      - name: ENV - BUILD_VERSION
        run: echo "BUILD_VERSION=${VERSION}.${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
      - name: ENV - BUILD_COMMIT
        run: echo "BUILD_COMMIT=${GITHUB_SHA}" >> $GITHUB_ENV
      ##########################################################################
      # Push version tag to GitHub #############################################
      ##########################################################################
      # TODO: this will error on duplicate
      #- name: package-version-to-git-tag
      #  uses: pkgdeps/git-tag-action@v2
      #  with:
      #    github_token: ${{ secrets.GITHUB_TOKEN }}
      #    github_repo: ${{ github.repository }}
      #    version: ${{ env.VERSION }}
      #    git_commit_sha: ${{ github.sha }}
      #    git_tag_prefix: "v"
      ##########################################################################
      # Push build tag to GitHub ###############################################
      ##########################################################################
      - name: package-version-to-git-tag + build number
        uses: pkgdeps/git-tag-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          version: ${{ env.BUILD_VERSION }}
          git_commit_sha: ${{ github.sha }}
          git_tag_prefix: "b"
      ##########################################################################
      # Push release tag to GitHub #############################################
      ##########################################################################
      - name: generate changelog
        run: npx auto-changelog --commit-limit 0 --latest-version ${{ env.VERSION }} --unreleased-only
      - name: package-version-to-git-release
        continue-on-error: true # Will fail if tag exists
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.VERSION }}
          release_name: ${{ env.VERSION }}
          body_path: ./CHANGELOG.md
          draft: false
          prerelease: false